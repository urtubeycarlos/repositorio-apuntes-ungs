{"version":3,"sources":["components/Logo.jsx","components/Loading.jsx","components/Login.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Component","Loading","props","Row","className","Spinner","animation","variant","Login","state","componentDidMount","bind","this","redirect","to","Container","Jumbotron","self","options","enableHighAccuracy","maximumAge","onSuccess","position","$","support","cors","ajax","then","json","setState","navigator","geolocation","getCurrentPosition","onError","error","App","path","Boolean","window","location","hostname","match","document","addEventListener","ReactDOM","render","cordovaWork","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"qVAIkCA,Y,wCCAbC,E,YAEjB,WAAYC,GAAO,qEACTA,I,sEAIN,OACI,kBAACC,EAAA,EAAD,CAAKC,UAAU,0BACX,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,iB,GATfP,a,uBCIhBQ,E,YAEjB,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KAEDO,MAAQ,CACT,SAAY,MAGhB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAPX,E,sEAYd,OAAKC,KAAKH,MAAMI,SAcL,kBAAC,IAAD,CAAUC,GAAIF,KAAKH,MAAMI,WAZ5B,kBAACE,EAAA,EAAD,CAAWX,UAAU,QACjB,kBAACY,EAAA,EAAD,KACI,kBAACb,EAAA,EAAD,CAAKC,UAAU,0BACX,4BAAKQ,KAAKH,MAAMI,UAChB,2DAEJ,kBAAC,EAAD,U,0CAahB,IAAII,EAAOL,KACPM,EAAU,CACVC,oBAAoB,EACpBC,WAAY,MAKhB,SAASC,EAAUC,GACfC,IAAEC,QAAQC,MAAO,EACjBF,IAAEG,KAAK,8BACFC,MAAK,SAASC,GACPA,GACAX,EAAKY,SAAS,CAAC,SAAY,cAP3CC,UAAUC,YAAYC,mBAAmBX,GAWzC,SAASY,EAAQC,GACbJ,UAAUC,YAAYC,mBAAmBX,EAAWY,EAASf,KAZJA,O,GAzClClB,a,QCIdmC,E,YAEnB,WAAYjC,GAAQ,qEACZA,I,sEAIN,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,KAAK,KACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,a,GAdqBpC,aCAbqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,SAASC,iBAAiB,eAAe,WAErCC,IAASC,OACL,kBAAC,EAAD,CAAKC,aAAa,IAClBJ,SAASK,eAAe,WAE7B,GDsHG,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.8aa7ef2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row } from 'react-bootstrap';\r\nimport './Logo.css'\r\n\r\nexport default class Logo extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Row className=\"justify-content-center\">\r\n                <img src=\"./logo.svg\"></img>\r\n            </Row>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nexport default class Loading extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <Row className=\"justify-content-center\">\r\n                <Spinner animation=\"border\" variant=\"primary\"/>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Controller } from 'react-controller'\r\nimport $ from 'jquery';\r\nimport Logo from './Logo.jsx';\r\nimport Loading from './Loading.jsx';\r\nimport { Container, Jumbotron, Row, Spinner } from 'react-bootstrap';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            \"redirect\": null\r\n        }\r\n\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n    }\r\n\r\n    render(){\r\n\r\n        if( !this.state.redirect ){\r\n            return (\r\n                <Container className=\"mt-8\">\r\n                    <Jumbotron>\r\n                        <Row className=\"justify-content-center\">                         \r\n                            <h1>{this.state.redirect}</h1>\r\n                            <h5>Detectando ubicaci√≥n...</h5>\r\n                        </Row>\r\n                        <Loading />\r\n                    </Jumbotron>\r\n                </Container>\r\n                \r\n            )\r\n        } else {\r\n            return <Redirect to={this.state.redirect}></Redirect>\r\n        }        \r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        var self = this;\r\n        var options = {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 3600000,\r\n        }\r\n        \r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError, options)\r\n\r\n        function onSuccess(position) {\r\n            $.support.cors = true\r\n            $.ajax(\"http://localhost/login.php\")\r\n                .then(function(json){\r\n                    if( json )\r\n                        self.setState({\"redirect\": \"search\"});\r\n                });\r\n        };\r\n      \r\n        function onError(error) {\r\n            navigator.geolocation.getCurrentPosition(onSuccess, onError, options)\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nclass Position {\r\n    constructor(lat, lon){\r\n        this.lat = lat;\r\n        this.lon = lon;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Logo from './components/Logo.jsx';\r\nimport Login from './components/Login.jsx'\r\nimport Search from './components/Login.jsx'\r\nimport $ from 'jquery'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/search\">\r\n            <Search />\r\n          </Route>\r\n        </Switch>\r\n    </Router>\r\n    );\r\n\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'cordova_script';\r\nimport { Router, Route, IndexRoute } from 'react-router';\r\n\r\ndocument.addEventListener('deviceready', () => {\r\n\r\n    ReactDOM.render(\r\n        <App cordovaWork={true}></App>,\r\n        document.getElementById('app')\r\n    );\r\n}, false);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}