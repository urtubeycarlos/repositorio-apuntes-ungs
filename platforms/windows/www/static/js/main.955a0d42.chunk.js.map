{"version":3,"sources":["services/careersService.js","services/assignaturesService.js","components/Logo.jsx","components/Loading.jsx","services/loginService.js","views/Login.jsx","components/CareerSelect.jsx","components/Search.jsx","components/Upload.jsx","views/Home.jsx","components/Note.jsx","views/Results.jsx","App.jsx","serviceWorker.js","index.js","config.js","services/RESTClient.js"],"names":["restclient","RESTClient","getAllCareers","get","getCareer","careerId","getAllAssignatures","getAssignatureByCareer","careerid","Logo","Row","className","src","Loading","Spinner","animation","variant","url","require","serverURI","Login","props","Container","Jumbotron","navigator","geolocation","getCurrentPosition","position","data","FormData","append","coords","latitude","longitude","pos","fetch","mode","method","body","then","response","json","validation","isLogged","window","location","href","error","this","componentDidMount","enableHighAccuracy","maximumAge","Component","CareerSelect","state","careers","isLoading","setState","Careers","catch","err","Autocomplete","disabled","id","options","onChange","event","newValue","getOptionLabel","option","Name","renderInput","params","TextField","label","fullWidth","Search","career","assignature","assignatureList","setCareer","bind","newCareer","Id","Assignatures","Form","Group","Button","color","onClick","search","Upload","fileSelected","selectFile","htmlFor","type","name","placeholder","raised","component","e","file","target","files","Home","a11yProps","index","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","width","TabPanel","children","value","other","Typography","role","hidden","aria-labelledby","Box","p","useState","tabIndex","setTabIndex","useTheme","classes","AppBar","Tabs","indicatorColor","textColor","aria-label","Tab","axis","direction","dir","Note","fa_extension","extensionToFontAwesome","Card","style","Body","Col","sm","Title","filename","extension","Text","description","extensions","word","excel","slide","text","video","audio","compressed","pdf","book","imgs","code","fas","includes","Results","results","App","history","browserHistory","path","Boolean","hostname","match","document","addEventListener","ReactDOM","render","cordovaWork","getElementById","serviceWorker","ready","registration","unregister","currentApiVersion","axios","apiURI","apiUri","endpoint","filters","urlEndpoint","getFiltersUrl","undefined","Object","keys","length","Error","post","_isAMomentObject","toISOString","result","key","push","parseFilterValue","join"],"mappings":"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","file":"static/js/main.955a0d42.chunk.js","sourcesContent":["import RESTClient from './RESTClient';\r\nconst restclient = new RESTClient();\r\n\r\nexport const getAllCareers = () => restclient.get('career');\r\nexport const getCareer = (careerId) => restclient.get('career', careerId);\r\n","import RESTClient from './RESTClient';\r\nconst restclient = new RESTClient();\r\n\r\nexport const getAllAssignatures = () => restclient.get('assignature');\r\n//export const getAssignature = (assignatureId) => restclient.get('assignature', assignatureId);\r\nexport const getAssignatureByCareer = (careerId) => restclient.get('assignature', null, { careerid: careerId });\r\n","import React from 'react';\r\nimport { Row } from 'react-bootstrap';\r\nimport './styles/logo.css'\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <Row className=\"justify-content-center\">\r\n            <img src=\"./logo.png\"></img>\r\n        </Row>);\r\n};\r\n\r\nexport default Logo;","import React, { Component } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Row } from 'react-bootstrap';\r\n\r\nconst Loading = () => {\r\n    return(\r\n        <Row className=\"justify-content-center\">\r\n            <Spinner animation=\"border\" variant=\"primary\"/>\r\n        </Row>);\r\n}\r\n\r\nexport default Loading;","import { serverURI } from './../config.js';\r\nconst axios = require('axios');\r\n\r\nlet url = `${serverURI}/login.php`;\r\n\r\nexport const login = pos => {\r\n    return fetch(url, {\r\n        mode: 'cors',\r\n        method: 'POST',\r\n        body: pos\r\n    }).then( response => response.json() );\r\n};","import React, { Component } from 'react';\r\nimport { Controller } from 'react-controller'\r\nimport Logo from '../components/Logo.jsx';\r\nimport Loading from '../components/Loading.jsx';\r\nimport { Container, Jumbotron, Row, Spinner } from 'react-bootstrap';\r\nimport { login } from '../services/loginService';\r\nconst axios = require('axios');\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n            return (\r\n                <Container>\r\n                    <Logo />\r\n                    <Jumbotron>\r\n                        <Row className=\"justify-content-center\">\r\n                            <h5>Detectando ubicación...</h5>\r\n                        </Row>\r\n                        <Loading />\r\n                    </Jumbotron>\r\n                </Container>\r\n            )\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        let gpsOptions = {\r\n            enableHighAccuracy: true,\r\n            maximumAge: 3600000\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError, gpsOptions);\r\n\r\n        function onSuccess(position) {\r\n            let data = new FormData()\r\n            data.append('lat', position.coords.latitude);\r\n            data.append('lon', position.coords.longitude);\r\n            login(data)\r\n                .then( validation => {\r\n                    if( validation.isLogged )\r\n                        window.location.href = \"/home\"\r\n                });\r\n        }\r\n      \r\n        function onError(error) {\r\n            this.componentDidMount();\r\n        }\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\n\r\nconst { getAllCareers } = require('../services/careersService');\r\n\r\nclass CareerSelect extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      careers: [],\r\n      isLoading: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isLoading: true,\r\n    }, () => {\r\n      getAllCareers()\r\n        .then(response => {\r\n          this.setState({\r\n            careers: response.data.Careers,\r\n            isLoading: false,\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        //handle somehow this error\r\n      });\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { careers, isLoading } = this.state;\r\n    return(\r\n      <Autocomplete\r\n        disabled={isLoading}\r\n        id=\"career-select\"\r\n        options={careers}\r\n        onChange={(event, newValue) => this.props.onChange && this.props.onChange(event, newValue)}\r\n        getOptionLabel={option => option.Name}\r\n        renderInput={params => (<TextField {...params} label=\"Carrera\" fullWidth />)} />\r\n    )\r\n  }\r\n}\r\n\r\nexport default CareerSelect;","import React, { Component } from 'react';\r\n\r\nimport { Container, Row, Form } from 'react-bootstrap';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport CareerSelect from './CareerSelect';\r\n\r\nconst { getAssignatureByCareer } = require('../services/assignaturesService');\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        career: null,\r\n        assignature: null,\r\n        assignatureList: [],\r\n        isLoading: null,\r\n      }\r\n\r\n      this.setCareer = this.setCareer.bind(this);\r\n    }\r\n\r\n\r\n    setCareer(newCareer) {\r\n      this.setState({\r\n        career: newCareer,\r\n        isLoading: true,\r\n      }, () => {\r\n        debugger\r\n        getAssignatureByCareer(newCareer.Id)\r\n        .then(response => {\r\n          this.setState({\r\n            assignatureList: response.data.Assignatures,\r\n            isLoading: false,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          //handle somehow this error\r\n        });\r\n      })\r\n    }\r\n\r\n    search() {\r\n\r\n    }\r\n\r\n    render() {\r\n      const { assignatureList, isLoading } = this.state;\r\n      return (\r\n        <Row className=\"justify-content-center\">\r\n          <Form>\r\n            <Form.Group>\r\n              <CareerSelect onChange={(event, career) => this.setCareer(career)}/>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Autocomplete\r\n                id=\"assignature-select\"\r\n                disabled={isLoading}\r\n                options={assignatureList}\r\n                onChange={(event, newValue) => this.setState({ assignature: newValue })}\r\n                getOptionLabel={option => option.Name}\r\n                renderInput={params => (<TextField {...params} label=\"Materia\" fullWidth />)} />\r\n            </Form.Group>\r\n            <div className=\"float-right\">\r\n              <Button variant=\"contained\" color=\"primary\" onClick={() => this.search()}>Buscar</Button>\r\n            </div>  \r\n          </Form>\r\n        </Row>);\r\n          \r\n    } \r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\nimport { Row, Form } from \"react-bootstrap\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\n\r\nclass Upload extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            fileSelected: \"Buscar...\"\r\n        }\r\n\r\n        this.selectFile = this.selectFile.bind(this);\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <Row className=\"justify-content-center\">\r\n                <Form>\r\n                    <Form.Group>\r\n                        <label htmlFor=\"career\">Carrera</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"career\" id=\"career\" placeholder=\"Seleccione Carrera...\" />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <label htmlFor=\"assignature\">Materia</label>\r\n                        <input type=\"text\" className=\"form-control\" name=\"assignature\" id=\"assignature\" placeholder=\"Seleccione Materia...\" />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mt-8\">                        \r\n                        <label htmlFor=\"raised-button-file\">Seleccione archivo</label><br/>\r\n                        <label htmlFor=\"raised-button-file\"> \r\n                            <Button raised component=\"span\" variant=\"contained\" color=\"primary\"> \r\n                                {this.state.fileSelected} \r\n                            </Button> \r\n                        </label>\r\n                        <input type=\"file\" id=\"raised-button-file\" onChange={this.selectFile}/>\r\n                    </Form.Group>\r\n                    <div className=\"float-right\">\r\n                        <Button variant=\"contained\" color=\"secondary\">Subir</Button>\r\n                    </div>  \r\n                </Form>\r\n            </Row>\r\n        )\r\n    }\r\n    \r\n\r\n\r\n    // manejarCambio(event){\r\n    //     let files = event.target.files;\r\n    // }\r\n\r\n    selectFile(e){\r\n        const file = e.target.files[0];\r\n        this.setState({'fileSelected': `Seleccionado: ${file.name}`});\r\n    }\r\n\r\n}\r\n\r\nexport default Upload;","import React, { Component } from 'react';\r\nimport { Container } from 'react-bootstrap';\r\nimport Logo from '../components/Logo';\r\nimport Search from '../components/Search';\r\nimport Upload from '../components/Upload';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useState } from 'react';\r\n\r\nconst Home = () => {\r\n    /**\r\n     * Methods\r\n    */\r\n    const a11yProps = (index) => {\r\n        return {\r\n          id: `full-width-tab-${index}`,\r\n          'aria-controls': `full-width-tabpanel-${index}`,\r\n        };\r\n    }\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n          backgroundColor: theme.palette.background.paper,\r\n          width: '100%',\r\n        },\r\n      }));\r\n\r\n    /**\r\n     * Component - TODO: Refactor to an atomic and independent component\r\n    */\r\n    const TabPanel = (props) => {\r\n        const { children, value, index, ...other } = props;\r\n      \r\n        return (\r\n          <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n          >\r\n            <Box p={3}>{children}</Box>\r\n          </Typography>\r\n        );\r\n      }\r\n\r\n    /**\r\n     * States and setStates\r\n    */\r\n    const [tabIndex, setTabIndex] = useState(0);\r\n\r\n    /**\r\n     * Variables\r\n    */\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Logo />\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <Tabs\r\n                        value={tabIndex}\r\n                        onChange={(event, index) => setTabIndex(index)}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"fullWidth\"\r\n                        aria-label=\"full width tabs example\"\r\n                    >\r\n                        <Tab label=\"Buscar Apuntes\" {...a11yProps(0)} />\r\n                        <Tab label=\"Subir Apuntes\" {...a11yProps(1)} />\r\n                    </Tabs>\r\n                </AppBar>\r\n                <SwipeableViews\r\n                    className={classes.root}\r\n                    axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n                    index={tabIndex}\r\n                >\r\n                    <TabPanel value={tabIndex} index={0} dir={theme.direction}><Search /></TabPanel>\r\n                    <TabPanel value={tabIndex} index={1} dir={theme.direction}><Upload /></TabPanel>\r\n                </SwipeableViews>\r\n            </Container>\r\n        </div>)\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport default class Note extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            fa_extension: \"fa fa-file-o\"\r\n        }\r\n\r\n        this.extensionToFontAwesome = {\r\n            \"pdf\": \"fa fa-file-pdf-o\"\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <Row className=\"justify-content-center\">\r\n                <Card style={{\"width\": \"75%\"}}>\r\n                    <Card.Body>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col sm={\"auto\"} className=\"my-auto\">\r\n                                    <i className={this.state.fa_extension} style={{\"fontSize\":\"5em\"}}></i>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Card.Title>{`${this.props.filename}${this.props.extension}`}</Card.Title>\r\n                                    <Card.Text>\r\n                                        {this.props.description}\r\n                                    </Card.Text>\r\n                                    <Button color=\"secondary\" href={this.props.url}>Descargar</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        let extensions = {\r\n            word : ['.doc', '.docx', '.odt'],\r\n            excel : ['.xls', '.xlsx', '.csv', '.xps'],\r\n            slide : ['.ppt', '.pptx', '.pps', '.ppsx', '.odp'],\r\n            text : ['.txt', '.md', '.markdown'],\r\n            video : ['.mp4', '.avi', '.3gp', '.wmv'],\r\n            audio : ['.mp3', '.m4a', '.ogg', '.aac', '.3gpp'],\r\n            compressed : ['.zip', '.rar'],\r\n            pdf : ['.pdf'],\r\n            book : ['.epub'],\r\n            imgs : ['.jpg', '.jpeg', '.jfif', '.png', '.webp', '.gif', '.bmp', '.dib', '.tif', '.tiff', '.svg'],\r\n            code : ['.py', '.java', '.jar', '.c', '.cpp', '.go', '.asm', '.js', '.html', '.css', '.sass']\r\n        }\r\n\r\n        let fas = {\r\n            word : 'fa fa-file-word-o',\r\n            excel: 'fa fa-file-excel-o',\r\n            slide: 'fa fa-file-powerpoint-o',\r\n            text: 'fa fa-file-text-o',\r\n            video: 'fa fa-file-video-o',\r\n            audio: 'fa fa-file-audio-o',\r\n            compressed: 'fa fa-file-zip-o',\r\n            pdf: 'fa fa-file-pdf-o',\r\n            book: 'fa fa-book',\r\n            imgs: 'fa fa-file-picture-o',\r\n            code: 'fa fa-file-code-o'\r\n        }\r\n\r\n        for(const type in extensions)\r\n            if( extensions[type].includes( this.props.extension ) )\r\n                this.setState({fa_extension: fas[type]})\r\n        \r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Container, Row, Jumbotron } from \"react-bootstrap\";\r\nimport Loading from \"../components/Loading.jsx\";\r\nimport Logo from '../components/Logo';\r\nimport Note from '../components/Note';\r\n\r\nexport default class Results extends Component {\r\n    \r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            results: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { results } = this.state;\r\n        return !results ?\r\n            <Container>\r\n                <Logo />\r\n                <Jumbotron>\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5>Buscando apuntes</h5>\r\n                    </Row>\r\n                    <Loading />\r\n                    <Note \r\n                        filename={'complejidad_computacional'} \r\n                        extension={'.java'} \r\n                        url={\"https://www.youtube.com/\"} \r\n                        description={\"Soy una describicion.\"}/>   \r\n                </Jumbotron>\r\n            </Container> :\r\n            <Container>\r\n                <Logo />\r\n                <Jumbotron>\r\n                    <Row className=\"justify-content-center\">\r\n                        <h5>Apuntes encontrados</h5>\r\n                    </Row>\r\n                </Jumbotron>\r\n            </Container>\r\n        }\r\n    }\r\n\r\n    // componentWillMount(){\r\n    //     var self = this;\r\n    //     $.ajax(\"http://localhost/api/1.0/note\").\r\n    //                 then(function(response){\r\n    //                     response['Notes'] = response['Notes'].map(function(note){\r\n    //                         console.log(note)\r\n    //                         return (\r\n    //                             <Note filename={`${note.Filename}.${note.Extension}`} description={note.Description} url={note.Url}/>\r\n    //                         )\r\n    //                     })\r\n    //                     self.setState({'results': response['Notes']});\r\n    //                 })\r\n        \r\n    // }","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Login from './views/Login.jsx'\r\nimport Home from './views/Home.jsx'\r\nimport Results from './views/Results.jsx'\r\nimport { Router, Route, browserHistory } from \"react-router\";\r\n\r\nexport default class App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <Router history = {browserHistory}>\r\n          <Route path = \"/\" component = {Login}/>\r\n          <Route path = \"/home\" component = {Home}/>\r\n          <Route path = \"/results\" component = {Results}/>\r\n        </Router>\r\n    );\r\n\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'cordova_script';\r\nimport Search from './components/Search.jsx';\r\n\r\ndocument.addEventListener('deviceready', () => {\r\n\r\n    ReactDOM.render(\r\n        <App cordovaWork={true}/>,\r\n        document.getElementById('app')\r\n    );\r\n}, false);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const serverURI = \"https://repositorio-apuntes-ungs.000webhostapp.com\";\r\nexport const currentApiVersion = \"1.0\";","import { serverURI, currentApiVersion } from './../config.js';\r\nconst axios = require('axios');\r\n\r\nexport default class RESTClient {\r\n  apiUri = '';\r\n  constructor(apiURI = `${serverURI}/api/${currentApiVersion}`) {\r\n    this.apiURI = apiURI;\r\n  }\r\n\r\n  get(endpoint, id = null, filters = {}) {\r\n    const urlEndpoint = id ? \r\n    `${this.apiURI}/${endpoint}/${id}${this.getFiltersUrl(filters)}` : \r\n    `${this.apiURI}/${endpoint}${this.getFiltersUrl(filters)}`\r\n\r\n    return axios.get(urlEndpoint);\r\n  }\r\n\r\n  post(endpoint, body){\r\n    if( body == undefined || Object.keys(body).length === 0 )\r\n      throw new Error(\"Body cant be empty\");\r\n    let urlEndpoint = `${this.apiURI}/${endpoint}`\r\n    return axios.post(urlEndpoint, body);\r\n  }\r\n\r\n  parseFilterValue( value ) {\r\n\r\n    if (value._isAMomentObject){\r\n      return value.toISOString();\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  getFiltersUrl(filters) {\r\n    let result = [];\r\n\r\n    for (var key in filters) {\r\n      if (filters[key] == undefined) { // what is this case for?\r\n        result.push(key);\r\n      }\r\n      else {\r\n        result.push(`${key}=${this.parseFilterValue(filters[key])}`);\r\n      }\r\n    }\r\n    return `?${result.join('&')}`;\r\n  }\r\n}"],"sourceRoot":""}